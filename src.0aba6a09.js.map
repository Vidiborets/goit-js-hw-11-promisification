{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolved","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","updatedUsers","map","user","all","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","resolv","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAAA,MAAMA,EAAQC,GACL,IAAIC,QAASC,IAClBC,WAAW,KACVD,EAASF,IACTA,KAICI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACbjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,EAAUC,KACrCC,MAAAA,EAAeH,EAASI,IAAIC,GAChCA,EAAKR,OAASI,EAAW,IAAKI,EAAMP,QAASO,EAAKP,QAAWO,GAE1DjB,OAAAA,QAAQkB,IAAIH,IAIbZ,EAASY,GAAgBV,QAAQc,MAAMJ,GAW7CJ,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AC3BnC,MAAMiB,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACf7B,MAAAA,EAAQsB,EAA0B,IAAK,KACtC,OAAA,IAAIpB,QAAQ,CAAC4B,EAAQC,KACxB3B,WAAW,KACYqB,KAAKE,SAAW,IAG/BG,EAAO,CAAEE,GAAIH,EAAYG,GAAI1B,KAAMN,IAEvC+B,EAAQF,EAAYG,KAErBhC,MAILiC,EAAa,EAAGD,GAAAA,EAAI1B,KAAAA,MACxBC,QAAQC,mBAAmBwB,kBAAmB1B,QAG1C4B,EAAWF,IACfzB,QAAQ4B,qCAAqCH,+BAa/CJ,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/B3B,KAAKwB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/B3B,KAAKwB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,KAC/B3B,KAAKwB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/B3B,KAAKwB,GACLI,MAAMH;;AChDT,aAHA,QAAA,oBACA,QAAA,eACA,QAAA,eACA,QAAA","file":"src.0aba6a09.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n  return new Promise((resolved) => {\n    setTimeout(() => {\n     resolved(ms)\n   },ms)\n })\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName, callback) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\nreturn Promise.all(updatedUsers)\n//   callback(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolv, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolv({ id: transaction.id, time: delay });\n            } \n            reject( transaction.id );\n            \n        }, delay);\n    })\n}\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","import './sass/main.scss';\nimport './js/task-1';\nimport './js/task-2';\nimport './js/task-3';\n"]}